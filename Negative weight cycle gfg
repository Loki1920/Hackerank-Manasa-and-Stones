#Bellman Ford Algorithms

#User function Template for python3

class Solution:
	def isNegativeWeightCycle(self, n, edges):
		#Code here
		d = [1e8] * n
		d[0] = 0
		
		for i in range(1,n):
		    for it in edges:
		        u = it[0]
		        v = it[1]
		        wt = it[2]
		        if d[u] + wt < d[v]: d[v] = d[u] + wt
		        
		for it in edges:
		    u = it[0]
		    v = it[1]
		    wt = it[2]
		    if d[u] + wt < d[v] : return 1
	    return 0


#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__ == '__main__':
	T=int(input())
	for i in range(T):
		n, m = input().split()
		n = int(n)
		m = int(m)
		edges = []
		for _ in range(m):
			edges.append(list(map(int, input().split())))
		obj = Solution()
		ans = obj.isNegativeWeightCycle(n, edges)
		print(ans)

# } Driver Code Ends
