#User function Template for python3

class Solution:
    
    
    def dfs(self,m,n,ans,currpath,r,c):
        if r >= n or c >= n or r<0 or c<0 or m[r] == 0:
            return
        if r==n-1 and c==n-1:
            ans.append(currpath)
            return 
        m[r] = 0
        
        self.dfs(m,n,ans,currpath+'U',r-1,c)
        self.dfs(m,n,ans,currpath+'D',r+1,c)
        self.dfs(m,n,ans,currpath+'L',r,c-1)
        self.dfs(m,n,ans,currpath+'R',r,c+1)
        
        m[r] = 1
        
        
        
    def findPath(self, m, n):
        # code here
        p = []
        self.dfs(m,n,p,'',0,0)
        return p
        


#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__=='__main__':
    t = int(input())
    for i in range(t):
        n = list(map(int, input().strip().split()))
        arr = list(map(int, input().strip().split()))
        
        matrix = [[0 for i in range(n[0])]for j in range(n[0])]
        k=0
        for i in range(n[0]):
            for j in range(n[0]):
                matrix[i][j] = arr[k]
                k+=1
        ob = Solution()
        result = ob.findPath(matrix, n[0])
        result.sort()
        if len(result) == 0 :
            print(-1)
        else:
            for x in result:
                print(x,end = " ")
            print()
# } Driver Code Ends
