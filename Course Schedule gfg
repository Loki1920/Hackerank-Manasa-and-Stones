#User function Template for python3

class Solution:
    def findOrder(self, V, m, prerequisites):
        # Code here
        adj = [[] for i in range(V)]
        for i in prerequisites:
            adj[i[1]].append(i[0])
            
        ind = [0 for i in  range(V)]
        for i in range(V):
            for j in adj[i]:
                ind[j] += 1 
        
        q = []
        for i in range(V):
            if ind[i] == 0:
                q.append(i)
                
        
        
        topo = []        
        while q:
            node = q[0]
            q.pop(0)
            topo.append(node)
            
            for i in adj[node]:
                ind[i] -= 1
                if ind[i] == 0:
                    q.append(i)
                    
        if len(topo) == V:
            return topo
            
        return []
        
    


#{ 
 # Driver Code Starts
# Driver Program

import sys
sys.setrecursionlimit(10**6)
        
def check(graph, N, res):
	map=[0]*N
	for i in range(N):
		map[res[i]]=i
	for i in range(N):
		for v in graph[i]:
			if map[i] > map[v]:
				return False
	return True

if __name__=='__main__':
    t = int(input())
    for i in range(t):
        n,m = list(map(int, input().strip().split()))
        adj = [[] for i in range(n)]
        prerequisites = []
        
        for i in range(m):
            u,v=map(int,input().split())
            adj[v].append(u)
            prerequisites.append([u,v])
            
        ob = Solution()
        
        res = ob.findOrder(n, m, prerequisites)
        
        if(not len(res)):
            print("No Ordering Possible")
        else:
            if check(adj, n, res):
                print(1)
            else:
                print(0)
# } Driver Code Ends
