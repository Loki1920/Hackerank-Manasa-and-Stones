class Solution:
    def dfs(self,node,col,V,adj,colour):
		colour[node] = col 
		for i in adj[node]:
		    if colour[i] == -1:
		        if self.dfs(i,not col ,V,adj,colour) == False:
		            return False
		    elif colour[i] == col:
		        return False 
		return True
	def isBipartite(self, V, adj):
		#code here
		colour = [-1 for i in range(V)]
		
		for i in range(V):
		    if colour[i] == -1:
		        if self.dfs(i,0,V,adj,colour) == False:
		            return False 
		    
		        
		return True


#{ 
 # Driver Code Starts

if __name__ == '__main__':
	T=int(input())
	for i in range(T):
		V, E = map(int, input().strip().split())
		adj = [[] for i in range(V)]
		for i in range(E):
			u, v = map(int, input().strip().split())
			adj[u].append(v)
			adj[v].append(u)
		obj = Solution()
		ans = obj.isBipartite(V, adj)
		if(ans):
			print("1")
		else:
			print("0")

# } Driver Code Ends
