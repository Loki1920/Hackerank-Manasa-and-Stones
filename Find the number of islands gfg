#User function Template for python3

import sys
sys.setrecursionlimit(10**8)
import collections 
class Solution:
    
    def numIslands(self,grid):
        if not grid:
            return 0 
        
        rows,cols = len(grid),len(grid[0])
        visited = set()
        ic = 0
        
        
        def bfs(r,c):
            q = collections.deque()
            visited.add((r,c))
            q.append((r,c))
            
            while q:
                row,col = q.popleft()
                directions = [[1, 0],[-1, 0],[0, 1],[0,-1],[-1,-1],[-1,1],[1,1],[1,-1]]
                for dr,dc in directions:
                    r,c = row + dr , col + dc
                    if (r >= 0 and r < rows and c >= 0 and c < cols and grid[r][c] == 1 and (r,c) not in visited ):
                        q.append((r,c))
                        visited.add((r,c))
                        
            
        
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == 1 and (r,c) not in visited:
                    bfs(r,c)
                    ic += 1
        return ic 


#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__=="__main__":
    for _ in range(int(input())):
        n,m=map(int,input().strip().split())
        grid=[]
        for i in range(n):
            grid.append([int(i) for i in input().strip().split()])
        obj=Solution()
        print(obj.numIslands(grid))
# } Driver Code Ends
