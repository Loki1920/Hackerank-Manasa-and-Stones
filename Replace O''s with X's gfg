#User function Template for python3

class Solution:
    def dfs(self,row,col,vis,mat,dr,dc):
        vis[row][col] = 1
        
        n = len(mat)
        m = len(mat[0])
        
        for i in range(4):
            nrow = row + dr[i]
            ncol = col + dc[i]
            
            if nrow >= 0 and nrow < n and ncol >= 0 and ncol < m and vis[nrow][ncol] == 0 and mat[nrow][ncol] == 'O':
                self.dfs(nrow,ncol,vis,mat,dr,dc)
    def fill(self, n, m, mat):
        
        dr = [-1,0,1,0]
        dc = [0,1,0,-1]
        
        vis = [[0 for j in range(m)] for i in range(n)]
        
        # 1st row  & last row
        for j in range(m):
            if vis[0][j]==0 and mat[0][j]== 'O':
                self.dfs(0,j,vis,mat,dr,dc)
            if vis[n-1][j] == 0 and mat[n-1][j] == 'O':
                self.dfs(n-1,j,vis,mat,dr,dc)
                
        # first column and last column 
        for i in range(n):
            if vis[i][0]==0 and mat[i][0] == 'O':
                self.dfs(i,0,vis,mat,dr,dc)
            if vis[i][m-1] == 0 and mat[i][m-1] == 'O':
                self.dfs(i,m-1,vis,mat,dr,dc)
                
        for i in range(n):
            for j in range(m):
                if vis[i][j]==0 and mat[i][j] == 'O':
                    mat[i][j] = 'X'
                    
        return mat
                
        
            
        
                
                    
                    


#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__ == '__main__':
    t = int(input())
    for _ in range(t):
        n, m = [int(x) for x in input().split()]
        mat = []
        for i in range(n):
            s = list(map(str,input().split()))
            mat.append(s)
        
        ob = Solution()
        ans = ob.fill(n, m, mat)
        for i in range(n):
            for j in range(m):
                print(ans[i][j], end = " ")
            print()
# } Driver Code Ends
