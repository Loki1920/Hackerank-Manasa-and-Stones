#User function Template for python3

from typing import List

class Solution:   
    def dfs(self,node,vis,pathVis,adj,check):
        vis[node] = 1
        pathVis[node] = 1
        check[node] = 1 
        
        for i in adj[node]:
            if vis[i] == 0:
                if self.dfs(i,vis,pathVis,adj,check) == True:
                    check[node] = 0
                    return True
            elif pathVis[i]:
                check[node] = 0
                return True
        
        check[node] = 1        
        pathVis[node] = 0
        return False
        
            
    def eventualSafeNodes(self, V : int, adj : List[List[int]]) -> List[int]:
        # code here
        vis = [0 for i in range(V)]
        pathVis = [0 for i in range(V)]
        check = [0 for i in range(V)]
        
        safenode = []
        
        for i in range(V):
            if vis[i] == 0:
                self.dfs(i,vis,pathVis,adj,check) 
                
        for i in range(V):
            if check[i] == 1:
                safenode.append(i)
                
                
        return safenode



#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__=="__main__":
    T = int(input())
    for t in range(T):
        
        V, E = map(int, input().strip().split())
        adj = [[] for i in range(V)]
        for i in range(E):
            u, v = map(int, input().strip().split())
            adj[u].append(v)
        obj = Solution()
        ans = obj.eventualSafeNodes(V, adj)
        for nodes in ans:
            print(nodes, end = ' ')
        print()
            


# } Driver Code Ends
