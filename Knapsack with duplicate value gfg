#User function Template for python3

class Solution:
    def knapSack(self, N, W, val, wt):
        dp = {}
        
        def solve(n,cap):
            if n==0 or cap==0:
                return 0
            elif (n,cap) in dp:
                return dp[(n,cap)]
            else:
                cwt = wt[n-1]
                cv = val[n-1]
                if cwt <= cap:
                    c1 = cv + solve(n,cap-cwt)
                    c2 = solve(n-1,cap)
                    c = max(c1,c2)
                else:
                    c =  solve(n-1,cap)
                dp[(n,cap)] = c
                return c
        return solve(N,W)
        # code here


#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__ == '__main__':
    t = int(input())
    for _ in range(t):
        N, W = [int(x) for x in input().split()]
        val = input().split()
        for itr in range(N):
            val[itr] = int(val[itr])
        wt = input().split()
        for it in range(N):
            wt[it] = int(wt[it])
        
        ob = Solution()
        print(ob.knapSack(N, W, val, wt))
# } Driver Code Ends
