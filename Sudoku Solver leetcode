class Solution:
    def isSafe(self,row,col,board,val):
        n = len(board)
        for i in range(n):
            if board[row][i] == val:
                return False
            if board[i][col] == val:
                return False
            if board[3 * (row//3)+i//3][3*(col//3)+i%3]== val:
                return False
        return True
        
    def solve(self,board):
        n = len(board[0])
        for row in range(n):
            for col in range(n):
                if board[row][col] == '.':
                    for val in ['1','2','3','4','5','6','7','8','9']:
                        if self.isSafe(row,col,board,val):
                            board[row][col] = val
                            if self.solve(board) == True:
                                return True
                            else:
                                board[row][col] = '.'
                    return False
        return True

    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        self.solve(board)
