class Solution:
    def editDistance(self, s, t):
        n1=len(s)
        n2=len(t)
        dp=[]
        for i in range(n1+1):
            dp.append([])
            for j in range(n2+1):
                dp[i].append(0)
        for i in range(1,n1+1):
            dp[i][0]=i
        for j in range(1,n2+1):
            dp[0][j]=j
        for i in range(1,n1+1):
            for j in range(1,n2+1):
                if(s[i-1]!=t[j-1]):
                    dp[i][j]=min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1
                else:
                    dp[i][j]=dp[i-1][j-1]
        return dp[n1][n2]
#{ 
 # Driver Code Starts
if __name__ == '__main__':
	T=int(input())
	for i in range(T):
		s, t = input().split()
		ob = Solution();
		ans = ob.editDistance(s, t)
		print(ans)
# } Driver Code Ends
