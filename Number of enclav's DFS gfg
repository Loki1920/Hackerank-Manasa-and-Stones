#User function Template for python3

from typing import List

class Solution:
    def dfs(self,row,col,vis,grid,dr,dc):
        n = len(grid)
        m = len(grid[0])
        vis[row][col] = 1 
        
        for i in range(4):
            nrow = row + dr[i]
            ncol = col + dc[i]
            
            if nrow >= 0 and nrow < n and ncol >= 0 and ncol < m and vis[nrow][ncol] == 0 and grid[nrow][ncol] == 1:
                self.dfs(nrow,ncol,vis,grid,dr,dc)
        
    def numberOfEnclaves(self, grid: List[List[int]]) -> int:
        # code here
        
        n = len(grid)
        m = len(grid[0])
        
        vis = [[0 for j in range(m)] for i in range(n)]
        
        dr = [-1,0,1,0]
        dc = [0,1,0,-1]
        
        
        for j in range(m):
            if vis[0][j] == 0 and grid[0][j] == 1:
                self.dfs(0,j,vis,grid,dr,dc)
            if vis[n-1][j] == 0 and grid[n-1][j] == 1:
                self.dfs(n-1,j,vis,grid,dr,dc)
        for i in range(n):
            if vis[i][0] == 0 and grid[i][0] == 1:
                self.dfs(i,0,vis,grid,dr,dc)
            if vis[i][m-1] == 0 and grid[i][m-1] == 1:
                self.dfs(i,m-1,vis,grid,dr,dc)
        
        c = 0      
        for i in range(n):
            for j in range(m):
                if vis[i][j] == 0 and grid[i][j] == 1:
                    c += 1
        return c
        


#{ 
 # Driver Code Starts
#Initial Template for Python 3


if __name__ == "__main__":
    for _ in range(int(input())):
        n, m = map(int,input().strip().split())
        grid = []
        for i in range(n):
            grid.append([int(i) for i in input().strip().split()])

        obj=Solution()
        print(obj.numberOfEnclaves(grid))
# } Driver Code Ends
