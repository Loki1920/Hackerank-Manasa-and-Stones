#User function Template for python3

class Solution:
    
    #Function to find the maximum profit and the number of jobs done.
    def JobScheduling(self,Jobs,n):
        # Sort in desc order on basis of profit
        Jobs.sort(key = lambda x: x.profit, reverse = True)
        # Now create a timeline and assign jobs based on the last date
        maxi_deadline = float("-inf")
        for job in Jobs:
            maxi_deadline = max(maxi_deadline, job.deadline)
        total_profit, filled = 0, 0
        timeline = [-1] * maxi_deadline
        # print(timeline)
        for job in Jobs: 
            index = job.deadline - 1
            while index >= 0 and timeline[index] != -1:
                index -= 1
            # print(timeline, index)
            if index >= 0:
                timeline[index] = job.id
                total_profit += job.profit
                filled += 1
            if filled == len(timeline):
                break
        return filled, total_profit
        

#{ 
 # Driver Code Starts
#Initial Template for Python 3
import atexit
import io
import sys

#Contributed by : Nagendra Jha
class Job:
    '''
    Job class which stores profit and deadline.
    '''
    def __init__(self,profit=0,deadline=0):
        self.profit = profit
        self.deadline = deadline
        self.id = 0

if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases) :
        n = int(input())
        info = list(map(int,input().strip().split()))
        Jobs = [Job() for i in range(n)]
        for i in range(n):
            Jobs[i].id = info[3*i]
            Jobs[i].deadline = info[3 * i + 1]
            Jobs[i].profit=info[3*i+2]
        ob = Solution()
        res = ob.JobScheduling(Jobs,n)
        print (res[0], end=" ")
        print (res[1])
# } Driver Code Ends
