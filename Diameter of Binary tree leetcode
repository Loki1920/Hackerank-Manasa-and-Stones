# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def height(self,node,dia):
        if not node:
            return -1
        lh = self.height(node.left,dia)
        rh = self.height(node.right,dia)
        dia = max(dia,2 + lh + rh)
        return 1 + max(lh,rh)
    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        res = [0]
        def dfs(node):
            if not node:
                return -1 
            lh = dfs(node.left)
            rh = dfs(node.right)
            res[0] = max(res[0],2 + lh + rh) 
            return 1 + max(lh,rh)
        dfs(root)
        return res[0]

        
