#User function Template for python3

import sys
from typing import List
sys.setrecursionlimit(10**8)
class Solution:
    def dfs(self,row,col,vis,grid,vec,row0,col0):
        vis[row][col] = 1
        vec.append((row-row0,col-col0))
        dr = [-1,0,1,0]
        dc = [0,1,0,-1]
        
        for i in range(4):
            nrow = row + dr[i]
            ncol = col + dc[i]
            
            if nrow >= 0 and nrow < n and ncol >= 0 and ncol < m and vis[nrow][ncol] == 0 and grid[nrow][ncol] == 1:
                self.dfs(nrow,ncol,vis,grid,vec,row0,col0)
    def countDistinctIslands(self, grid : List[List[int]]) -> int:
        # code  
        
        
        n = len(grid)
        m = len(grid[0])
        
        vis = [[0 for j in range(m)] for i in range(n)] 
        st = []
        
        for i in range(n):
            for j in range(m):
                if vis[i][j] == 0 and grid[i][j] ==1:
                    vec = []
                    self.dfs(i,j,vis,grid,vec,i,j)
                    if vec not in st:
                        st.append(vec)
        return len(st)



#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__=="__main__":
    for _ in range(int(input())):
        n,m=map(int,input().strip().split())
        grid=[]
        for i in range(n):
            grid.append([int(i) for i in input().strip().split()])
        obj=Solution()
        print(obj.countDistinctIslands(grid))
# } Driver Code Ends
