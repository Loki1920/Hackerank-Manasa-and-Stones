from typing import List
class Solution:
    #Function to detect cycle in an undirected graph.
    def dfs(self,src,parent,adj,vis):
        vis.add(src)
        for i in adj[src]:
            if i not in  vis:
                if self.dfs(i,src,adj,vis) == True:
                    return True
            elif parent != i:
                return True 
        return False 
        
        
                    
            
	def isCycle(self, V: int, adj: List[List[int]]) -> bool:
		#Code here
		vis = set()
		for i in range(V):
		    if i not in vis:
		        if self.dfs(i,-1,adj,vis) == True:
		            return True
		            
		return False
		
		


#{ 
 # Driver Code Starts

if __name__ == '__main__':

	T=int(input())
	for i in range(T):
		V, E = map(int, input().split())
		adj = [[] for i in range(V)]
		for _ in range(E):
			u, v = map(int, input().split())
			adj[u].append(v)
			adj[v].append(u)
		obj = Solution()
		ans = obj.isCycle(V, adj)
		if(ans):
			print("1")
		else:
			print("0")

# } Driver Code Ends
