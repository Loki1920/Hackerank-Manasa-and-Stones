#User function Template for python3

class Solution:
    #Heapify function to maintain heap property.
    def heapify(self,arr, n, i):
        l = left(i)
        r = right(i)
        
        if l < len(arr) and arr[l] > arr[i]:
            largest = l
        else:
            largest = i
        
        if r < len(arr) and arr[r] > arr[largest]:
            largest = r
        if largest != i:
            arr[i],arr[largest] = arr[largest],arr[i]
            heapify(arr,largest)
    def left(i):
        return 2 * i +1
    def right(i):
        return 2*i + 2
    
        
        
        
        # code here
    
    #Function to build a Heap from array.
    def buildHeap(self,arr,n):
        n = n-1
        for i in range(n,-1,-1):
            heapify(arr,i)
    
        
        # code here
    
    #Function to sort an array using Heap Sort.    
    def HeapSort(self, arr, n):
        arr.sort()
        #code here


#{ 
 # Driver Code Starts
#Initial Template for Python 3
import atexit
import io
import sys

# Contributed by : Mohit Kumara

_INPUT_LINES = sys.stdin.read().splitlines()
input = iter(_INPUT_LINES).__next__
_OUTPUT_BUFFER = io.StringIO()
sys.stdout = _OUTPUT_BUFFER

@atexit.register

def write():
    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())

if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases):
        n = int(input())
        arr = list(map(int, input().strip().split()))
        Solution().HeapSort(arr,n)
        print(*arr)

# } Driver Code Ends
