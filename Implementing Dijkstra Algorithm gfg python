import heapq
class Solution:

    #Function to find the shortest distance of all the vertices
    #from the source vertex S.
    def dijkstra(self, V, adj, S):
        pq=[]
        distances= [float('inf')]*V
        distances[S]=0
        pq.append((0, S))
        while pq:
            d,u= heapq.heappop(pq)
            for v,w in adj[u]:
                min_dist = distances[u]+w
                if min_dist< distances[v]:
                    distances[v]= min_dist
                    heapq.heappush(pq, (min_dist,v))
        return(distances)
        #code here

        
        #code here


#{ 
 # Driver Code Starts
#Initial Template for Python 3
import atexit
import io
import sys


if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases):
        V,E = map(int,input().strip().split())
        adj = [[] for i in range(V)]
        for i in range(E):
            u,v,w = map(int,input().strip().split())
            adj[u].append([v,w])
            adj[v].append([u,w])
        S=int(input())
        ob = Solution()
        
        res = ob.dijkstra(V,adj,S)
        for i in res:
            print(i,end=" ")
        print()
# } Driver Code Ends
