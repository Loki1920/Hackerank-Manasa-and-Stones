class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        def dfs(i,j,dp):
            
            if i < 0 or j < 0 or i >= len(obstacleGrid) or j  >= len(obstacleGrid[0]) :
                return 0
            if i >=0 and j >=0 and obstacleGrid[i][j] == 1:
                dp[i][j] = 0
                return dp[i][j]
            if i==m-1 and j==n-1:
                dp[i][j] = 1
                return dp[i][j]
            if dp[i][j] != -1:
                return dp[i][j]
            rt = dfs(i,j+1,dp)
            dn = dfs(i+1,j,dp)
            dp[i][j] = rt + dn
            return dp[i][j]
        dp = [[-1 for j in range(n)] for i in range(m)]
        return dfs(0,0,dp)
                
        
